generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  email           String   @unique
  firstName       String
  lastName        String
  idProofUrl      String?
  profession      String?
  avatarUrl       String?  @map("avatar_url")
  role            UserRole
  isEmailVerified Boolean  @default(false) @map("is_email_verified")
  isActive        Boolean  @default(true) @map("is_active")
  clientStatus    ClientStatus? @default(ACTIVE) @map("client_status")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @map("updated_at")

  // Relation for a client to have one practitioner
  practitionerId String? @db.ObjectId
  practitioner   User?   @relation("PractitionerToClients", fields: [practitionerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Relation for a practitioner to have many clients
  clients User[] @relation("PractitionerToClients")

  // Relation for invitations sent by a practitioner
  sentInvitations Invitation[] @relation("PractitionerInvitations")

  // Relation for intake forms created by a practitioner (templates)
  intakeForms IntakeForm[]

  // Relation for intake form submissions by clients
  intakeFormSubmissions IntakeFormSubmission[]

  @@map("users")
}

model Invitation {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  practitionerId String   @db.ObjectId
  clientEmail    String
  clientFirstName String
  clientLastName  String
  token          String   @unique
  expiresAt      DateTime
  isAccepted     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  intakeFormId   String?  @db.ObjectId

  practitioner User        @relation("PractitionerInvitations", fields: [practitionerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  intakeForm   IntakeForm? @relation(fields: [intakeFormId], references: [id], onDelete: SetNull)

  @@unique([practitionerId, clientEmail])
  @@map("invitations")
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("otps")
}

enum UserRole {
  PRACTITIONER
  CLIENT
}

enum ClientStatus {
  ACTIVE
  NEEDS_INTAKE
  INTAKE_COMPLETED
}

enum QuestionType {
  SHORT_ANSWER
  LONG_ANSWER
  MULTIPLE_CHOICE
  CHECKBOXES
  SCALE
  DROPDOWN
  FILE_UPLOAD
  RATING
  MULTIPLE_CHOICE_GRID
  TICK_BOX_GRID
}

// IntakeForm template - created by practitioner
model IntakeForm {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String?
  practitionerId String   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  practitioner User       @relation(fields: [practitionerId], references: [id], onDelete: Cascade)
  questions    Question[]

  // Relation to invitations
  invitations Invitation[]

  // Relation to submissions
  submissions IntakeFormSubmission[]

  @@map("intake_forms")
}

// Question template - part of IntakeForm
model Question {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  formId     String       @db.ObjectId
  text       String
  type       QuestionType
  options    String[] // For multiple choice, checkboxes
  isRequired Boolean      @default(true)
  order      Int

  form IntakeForm @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("questions")
}

// IntakeFormSubmission - snapshot of when a client filled out a form
model IntakeFormSubmission {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId   String   @db.ObjectId
  formId     String   @db.ObjectId
  submittedAt DateTime @default(now())

  client User         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  form   IntakeForm   @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers Answer[]

  @@map("intake_form_submissions")
}

// Answer - individual response to a question
model Answer {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  submissionId String   @db.ObjectId
  questionId   String   @db.ObjectId
  value        String   // Store as JSON string for complex answers

  submission IntakeFormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("answers")
}
