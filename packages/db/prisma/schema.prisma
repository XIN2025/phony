generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ===============================================
//           CORE USER & AUTH MODELS
// ===============================================
model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  email           String   @unique
  firstName       String
  lastName        String?
  idProofUrl      String?
  profession      String?
  avatarUrl       String?  @map("avatar_url")
  role            UserRole
  isEmailVerified Boolean  @default(false) @map("is_email_verified")
  isActive        Boolean  @default(true) @map("is_active")
  clientStatus    ClientStatus? @map("client_status")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // --- EXISTING RELATIONS ---
  practitionerId String? @db.ObjectId
  practitioner   User?   @relation("PractitionerToClients", fields: [practitionerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  clients        User[]  @relation("PractitionerToClients")
  sentInvitations Invitation[] @relation("PractitionerInvitations")
  intakeForms     IntakeForm[]
  intakeFormSubmissions IntakeFormSubmission[]

  // === NEW RELATIONS for Sessions, Plans, and Tasks ===
  // As a Practitioner
  practitionerSessions Session[]      @relation("PractitionerSessions")
  practitionerPlans    Plan[]         @relation("PractitionerPlans")

  // As a Client
  clientSessions          Session[]              @relation("ClientSessions")
  clientPlans             Plan[]                 @relation("ClientPlans")
  clientCompletions       ActionItemCompletion[] @relation("ClientCompletions")

  // === NEW RELATIONS for Messaging ===
  // As a Practitioner
  practitionerConversations Conversation[] @relation("PractitionerConversations")
  // As a Client
  clientConversations     Conversation[] @relation("ClientConversations")
  // As a message author
  sentMessages            Message[]      @relation("SentMessages")
  // Add message reactions relation
  messageReactions        MessageReaction[] @relation("MessageReactions")

  @@map("users")
}

// ===============================================
//      UNCHANGED & EXISTING MODELS
// ===============================================

model Invitation {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  practitionerId  String           @db.ObjectId
  clientEmail     String
  clientFirstName String
  clientLastName  String?
  token           String           @unique
  expiresAt       DateTime
  status          InvitationStatus @default(PENDING)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  intakeFormId    String?          @db.ObjectId
  practitioner    User             @relation("PractitionerInvitations", fields: [practitionerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  intakeForm      IntakeForm?      @relation(fields: [intakeFormId], references: [id], onDelete: SetNull)
  @@unique([practitionerId, clientEmail])
  @@map("invitations")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("otps")
}

enum UserRole {
  PRACTITIONER
  CLIENT
}

enum ClientStatus {
  ACTIVE
  NEEDS_INTAKE
  INTAKE_COMPLETED
}

enum QuestionType {
  SHORT_ANSWER
  LONG_ANSWER
  MULTIPLE_CHOICE
  CHECKBOXES
  SCALE
  DROPDOWN
  FILE_UPLOAD
  RATING
  MULTIPLE_CHOICE_GRID
  TICK_BOX_GRID
}

model IntakeForm {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String?
  practitionerId String   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  practitioner   User       @relation(fields: [practitionerId], references: [id], onDelete: Cascade)
  questions      Question[]
  invitations    Invitation[]
  submissions    IntakeFormSubmission[]
  @@map("intake_forms")
}

model Question {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  formId     String       @db.ObjectId
  text       String
  type       QuestionType
  options    String[]
  isRequired Boolean      @default(true)
  order      Int
  form       IntakeForm @relation(fields: [formId], references: [id], onDelete: Cascade)
  @@map("questions")
}

model IntakeFormSubmission {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId    String   @db.ObjectId
  formId      String   @db.ObjectId
  submittedAt DateTime @default(now())
  client      User       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  form        IntakeForm @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     Answer[]
  @@map("intake_form_submissions")
}

model Answer {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  submissionId String   @db.ObjectId
  questionId   String   @db.ObjectId
  value        Json
  submission   IntakeFormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  @@map("answers")
}

// ===============================================
//      === NEW MODELS FOR UPCOMING FEATURES ===
// ===============================================

model Session {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  practitionerId     String        @db.ObjectId
  practitioner       User          @relation("PractitionerSessions", fields: [practitionerId], references: [id], onDelete: Cascade)
  clientId           String        @db.ObjectId
  client             User          @relation("ClientSessions", fields: [clientId], references: [id], onDelete: Cascade)
  title              String?
  notes              String?
  recordedAt         DateTime      @default(now())
  status             SessionStatus @default(UPLOADING)
  audioFileUrl       String? 
  transcript         String?
  transcriptionJobId String?
  plan               Plan?
  @@map("sessions")
}

enum SessionStatus {
  UPLOADING
  TRANSCRIBING
  REVIEW_READY
  COMPLETED
}

model Plan {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  sessionId      String     @unique @db.ObjectId
  session        Session    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  practitionerId String     @db.ObjectId
  practitioner   User       @relation("PractitionerPlans", fields: [practitionerId], references: [id], onDelete: Cascade)
  clientId       String     @db.ObjectId
  client         User       @relation("ClientPlans", fields: [clientId], references: [id], onDelete: Cascade)
  status         PlanStatus @default(DRAFT)
  publishedAt    DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  actionItems    ActionItem[]
  @@map("plans")
}

enum PlanStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model ActionItem {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  planId      String      @db.ObjectId
  plan        Plan        @relation(fields: [planId], references: [id], onDelete: Cascade)
  description String
  category    String?
  target      String?
  frequency   String?
  source      ActionItemSource @default(MANUAL)
  resources   Resource[]
  completions ActionItemCompletion[]
  @@map("action_items")
}

enum ActionItemSource {
  AI_SUGGESTED
  MANUAL
}

model Resource {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  actionItemId String       @db.ObjectId
  actionItem   ActionItem   @relation(fields: [actionItemId], references: [id], onDelete: Cascade)
  type         ResourceType
  url          String
  title        String?
  @@map("resources")
}

enum ResourceType {
  LINK
  PDF
}

model ActionItemCompletion {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  actionItemId  String     @db.ObjectId
  actionItem    ActionItem @relation(fields: [actionItemId], references: [id], onDelete: Cascade)
  clientId      String     @db.ObjectId
  client        User       @relation("ClientCompletions", fields: [clientId], references: [id], onDelete: Cascade)
  completedAt   DateTime   @default(now())
  rating        Int?
  journalEntry  String?
  achievedValue String?
  @@map("action_item_completions")
}

// ===============================================
//      === NEW MODELS FOR MESSAGING ===
// ===============================================

model Conversation {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  practitionerId String   @db.ObjectId
  practitioner   User     @relation("PractitionerConversations", fields: [practitionerId], references: [id], onDelete: Cascade)
  clientId       String   @db.ObjectId
  client         User     @relation("ClientConversations", fields: [clientId], references: [id], onDelete: Cascade)
  messages       Message[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  @@unique([practitionerId, clientId])
  @@map("conversations")
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  authorId       String       @db.ObjectId
  author         User         @relation("SentMessages", fields: [authorId], references: [id], onDelete: Cascade)
  content        String
  createdAt      DateTime     @default(now())
  readAt         DateTime?
  reactions      MessageReaction[]
  
  @@index([conversationId, createdAt])
  @@index([authorId])
  @@map("messages")
}

model MessageReaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  messageId String   @db.ObjectId
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  user      User     @relation("MessageReactions", fields: [userId], references: [id], onDelete: Cascade)
  emoji     String
  createdAt DateTime @default(now())
  
  @@unique([messageId, userId, emoji])
  @@map("message_reactions")
}
