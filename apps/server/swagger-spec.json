{
  "openapi": "3.0.0",
  "paths": {
    "/api": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["App"]
      }
    },
    "/api/auth/otp/verify": {
      "post": {
        "operationId": "AuthController_verifyOtp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VerifyOtpDto" } } }
        },
        "responses": {
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LoginResponseDto" } } }
          }
        },
        "tags": ["auth"]
      }
    },
    "/api/auth/otp": {
      "post": {
        "operationId": "AuthController_otpAuth",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OtpAuthDto" } } }
        },
        "responses": {
          "default": {
            "description": "Whether the OTP was sent successfully",
            "content": { "application/json": { "schema": { "type": "boolean" } } }
          }
        },
        "tags": ["auth"]
      }
    },
    "/api/auth/practitioner/signup": {
      "post": {
        "operationId": "AuthController_practitionerSignUp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PractitionerSignUpDto" } } }
        },
        "responses": {
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LoginResponseDto" } } }
          }
        },
        "tags": ["auth"]
      }
    },
    "/api/auth/client/signup": {
      "post": {
        "operationId": "AuthController_clientSignUp",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LoginResponseDto" } } }
          }
        },
        "tags": ["auth"]
      }
    },
    "/api/auth/profile": {
      "post": {
        "operationId": "AuthController_updateProfile",
        "parameters": [],
        "responses": { "201": { "description": "" } },
        "tags": ["auth"]
      }
    },
    "/api/auth/me": {
      "get": {
        "operationId": "AuthController_getCurrentUser",
        "parameters": [],
        "responses": { "200": { "description": "User information retrieved successfully." } },
        "summary": "Get current user information",
        "tags": ["auth"]
      }
    },
    "/api/practitioner/invitations/token/{token}": {
      "get": {
        "operationId": "PractitionerController_getInvitationByToken",
        "parameters": [{ "name": "token", "required": true, "in": "path", "schema": { "type": "string" } }],
        "responses": {
          "200": { "description": "Invitation details found." },
          "404": { "description": "Invitation not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get invitation details by token",
        "tags": ["practitioner"]
      }
    },
    "/api/practitioner/invite-client": {
      "post": {
        "operationId": "PractitionerController_inviteClient",
        "parameters": [],
        "responses": {
          "201": { "description": "Client invitation sent successfully" },
          "400": { "description": "Bad request - client already exists or invitation already sent" },
          "404": { "description": "Practitioner not found" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Invite a client to the platform",
        "tags": ["practitioner"]
      }
    },
    "/api/practitioner/invitations": {
      "get": {
        "operationId": "PractitionerController_getInvitations",
        "parameters": [],
        "responses": { "200": { "description": "List of invitations retrieved successfully" } },
        "security": [{ "bearer": [] }],
        "summary": "Get all invitations sent by the practitioner",
        "tags": ["practitioner"]
      }
    },
    "/api/practitioner/invitations/{id}/resend": {
      "post": {
        "operationId": "PractitionerController_resendInvitation",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
        "responses": {
          "201": { "description": "Invitation resent successfully" },
          "404": { "description": "Invitation not found" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Resend a specific invitation",
        "tags": ["practitioner"]
      }
    },
    "/api/practitioner/invitations/{id}": {
      "delete": {
        "operationId": "PractitionerController_deleteInvitation",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
        "responses": {
          "200": { "description": "Invitation deleted successfully" },
          "403": { "description": "Forbidden - invitation does not belong to practitioner" },
          "404": { "description": "Invitation not found" }
        },
        "security": [{ "bearer": [] }],
        "summary": "Delete a specific invitation",
        "tags": ["practitioner"]
      }
    },
    "/api/practitioner/clients": {
      "get": {
        "operationId": "PractitionerController_getClients",
        "parameters": [],
        "responses": { "200": { "description": "List of clients retrieved successfully" } },
        "security": [{ "bearer": [] }],
        "summary": "Get all clients of the practitioner",
        "tags": ["practitioner"]
      }
    },
    "/api/intake-forms": {
      "post": {
        "operationId": "IntakeFormController_create",
        "parameters": [],
        "responses": { "201": { "description": "The form has been successfully created." } },
        "security": [{ "bearer": [] }],
        "summary": "Create a new intake form",
        "tags": ["intake-forms"]
      },
      "get": {
        "operationId": "IntakeFormController_findAll",
        "parameters": [],
        "responses": { "200": { "description": "List of intake forms." } },
        "security": [{ "bearer": [] }],
        "summary": "Get all intake forms for the logged-in practitioner",
        "tags": ["intake-forms"]
      }
    },
    "/api/intake-forms/{id}": {
      "get": {
        "operationId": "IntakeFormController_findOne",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
        "responses": {
          "200": { "description": "The intake form." },
          "403": { "description": "Forbidden." },
          "404": { "description": "Form not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get a specific intake form by ID",
        "tags": ["intake-forms"]
      },
      "put": {
        "operationId": "IntakeFormController_update",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
        "responses": {
          "200": { "description": "The form has been successfully updated." },
          "403": { "description": "Forbidden." },
          "404": { "description": "Form not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Update an intake form",
        "tags": ["intake-forms"]
      },
      "delete": {
        "operationId": "IntakeFormController_remove",
        "parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
        "responses": {
          "204": { "description": "The form has been successfully deleted." },
          "403": { "description": "Forbidden." },
          "404": { "description": "Form not found." }
        },
        "security": [{ "bearer": [] }],
        "summary": "Delete an intake form",
        "tags": ["intake-forms"]
      }
    },
    "/api/client/intake-form": {
      "get": {
        "operationId": "ClientController_getIntakeForm",
        "parameters": [],
        "responses": { "200": { "description": "Intake form retrieved successfully." } },
        "security": [{ "bearer": [] }],
        "summary": "Get intake form for the logged-in client",
        "tags": ["client"]
      }
    },
    "/api/client/intake-form/submit": {
      "post": {
        "operationId": "ClientController_submitIntakeForm",
        "parameters": [],
        "responses": { "200": { "description": "Intake form submitted successfully." } },
        "security": [{ "bearer": [] }],
        "summary": "Submit intake form answers",
        "tags": ["client"]
      }
    },
    "/api/client/fix-statuses": {
      "post": {
        "operationId": "ClientController_fixClientStatuses",
        "parameters": [],
        "responses": { "200": { "description": "Client statuses fixed successfully." } },
        "security": [{ "bearer": [] }],
        "summary": "Fix client statuses that are inconsistent with their submissions",
        "tags": ["client"]
      }
    }
  },
  "info": { "title": "NestJS API", "description": "API for NestJS", "version": "1.0", "contact": {} },
  "tags": [{ "name": "API", "description": "" }],
  "servers": [],
  "components": {
    "securitySchemes": { "bearer": { "scheme": "bearer", "bearerFormat": "JWT", "type": "http" } },
    "schemas": {
      "VerifyOtpDto": {
        "type": "object",
        "properties": {
          "email": { "type": "string" },
          "otp": { "type": "string" },
          "role": { "type": "string", "enum": ["PRACTITIONER", "CLIENT"] }
        },
        "required": ["email", "otp", "role"]
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "email": { "type": "string" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "avatarUrl": { "type": "string", "nullable": true },
          "role": { "type": "string", "enum": ["PRACTITIONER", "CLIENT"] },
          "profession": { "type": "string", "nullable": true },
          "clientStatus": { "type": "string", "enum": ["ACTIVE", "NEEDS_INTAKE", "INTAKE_COMPLETED"], "nullable": true }
        },
        "required": ["id", "email", "firstName", "lastName", "avatarUrl", "role", "profession", "clientStatus"]
      },
      "LoginResponseDto": {
        "type": "object",
        "properties": { "token": { "type": "string" }, "user": { "$ref": "#/components/schemas/UserDto" } },
        "required": ["token", "user"]
      },
      "OtpAuthDto": { "type": "object", "properties": { "email": { "type": "string" } }, "required": ["email"] },
      "PractitionerSignUpDto": {
        "type": "object",
        "properties": {
          "email": { "type": "string" },
          "otp": { "type": "string" },
          "role": { "type": "string", "enum": ["PRACTITIONER"], "default": "PRACTITIONER" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "profession": { "type": "string" }
        },
        "required": ["email", "otp", "role", "firstName", "lastName", "profession"]
      }
    }
  }
}
